// Code generated by protoc-gen-go. DO NOT EDIT.
// source: catimage.proto

package catimage

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CatImageRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CatImageRequest) Reset()         { *m = CatImageRequest{} }
func (m *CatImageRequest) String() string { return proto.CompactTextString(m) }
func (*CatImageRequest) ProtoMessage()    {}
func (*CatImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_951246e6498d296b, []int{0}
}

func (m *CatImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CatImageRequest.Unmarshal(m, b)
}
func (m *CatImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CatImageRequest.Marshal(b, m, deterministic)
}
func (m *CatImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatImageRequest.Merge(m, src)
}
func (m *CatImageRequest) XXX_Size() int {
	return xxx_messageInfo_CatImageRequest.Size(m)
}
func (m *CatImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CatImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CatImageRequest proto.InternalMessageInfo

type CatImageResponse struct {
	Fact                 string   `protobuf:"bytes,1,opt,name=fact,proto3" json:"fact,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CatImageResponse) Reset()         { *m = CatImageResponse{} }
func (m *CatImageResponse) String() string { return proto.CompactTextString(m) }
func (*CatImageResponse) ProtoMessage()    {}
func (*CatImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_951246e6498d296b, []int{1}
}

func (m *CatImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CatImageResponse.Unmarshal(m, b)
}
func (m *CatImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CatImageResponse.Marshal(b, m, deterministic)
}
func (m *CatImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatImageResponse.Merge(m, src)
}
func (m *CatImageResponse) XXX_Size() int {
	return xxx_messageInfo_CatImageResponse.Size(m)
}
func (m *CatImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CatImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CatImageResponse proto.InternalMessageInfo

func (m *CatImageResponse) GetFact() string {
	if m != nil {
		return m.Fact
	}
	return ""
}

func init() {
	proto.RegisterType((*CatImageRequest)(nil), "CatImageRequest")
	proto.RegisterType((*CatImageResponse)(nil), "CatImageResponse")
}

func init() { proto.RegisterFile("catimage.proto", fileDescriptor_951246e6498d296b) }

var fileDescriptor_951246e6498d296b = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x4e, 0x2c, 0xc9,
	0xcc, 0x4d, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x12, 0xe4, 0xe2, 0x77, 0x4e,
	0x2c, 0xf1, 0x04, 0x89, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x28, 0xa9, 0x71, 0x09, 0x20,
	0x84, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x84, 0xb8, 0x58, 0xd2, 0x12, 0x93, 0x4b, 0x24,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x23, 0x7b, 0x84, 0xd6, 0xe0, 0xd4, 0xa2, 0xb2,
	0xcc, 0xe4, 0x54, 0x21, 0x1d, 0x2e, 0x66, 0xf7, 0xd4, 0x12, 0x21, 0x01, 0x3d, 0x34, 0x33, 0xa5,
	0x04, 0xf5, 0xd0, 0x8d, 0x54, 0x62, 0x48, 0x62, 0x03, 0x3b, 0xc1, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0x38, 0xff, 0xcc, 0x61, 0x94, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CatImageServiceClient is the client API for CatImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CatImageServiceClient interface {
	Get(ctx context.Context, in *CatImageRequest, opts ...grpc.CallOption) (*CatImageResponse, error)
}

type catImageServiceClient struct {
	cc *grpc.ClientConn
}

func NewCatImageServiceClient(cc *grpc.ClientConn) CatImageServiceClient {
	return &catImageServiceClient{cc}
}

func (c *catImageServiceClient) Get(ctx context.Context, in *CatImageRequest, opts ...grpc.CallOption) (*CatImageResponse, error) {
	out := new(CatImageResponse)
	err := c.cc.Invoke(ctx, "/CatImageService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatImageServiceServer is the server API for CatImageService service.
type CatImageServiceServer interface {
	Get(context.Context, *CatImageRequest) (*CatImageResponse, error)
}

// UnimplementedCatImageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCatImageServiceServer struct {
}

func (*UnimplementedCatImageServiceServer) Get(ctx context.Context, req *CatImageRequest) (*CatImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterCatImageServiceServer(s *grpc.Server, srv CatImageServiceServer) {
	s.RegisterService(&_CatImageService_serviceDesc, srv)
}

func _CatImageService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatImageServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CatImageService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatImageServiceServer).Get(ctx, req.(*CatImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CatImageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CatImageService",
	HandlerType: (*CatImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CatImageService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catimage.proto",
}
